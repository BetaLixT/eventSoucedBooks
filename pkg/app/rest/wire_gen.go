// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rest

import (
	"eventSourcedBooks/pkg/app/rest/controllers/v1"
	"eventSourcedBooks/pkg/domain/auth"
	"eventSourcedBooks/pkg/domain/courtroom"
	"eventSourcedBooks/pkg/infra"
	"eventSourcedBooks/pkg/infra/clients/naga"
	"eventSourcedBooks/pkg/infra/config"
	"eventSourcedBooks/pkg/infra/db"
	"eventSourcedBooks/pkg/infra/http"
	"eventSourcedBooks/pkg/infra/insights"
	"eventSourcedBooks/pkg/infra/logger"
	"eventSourcedBooks/pkg/infra/msgbrker"
	"eventSourcedBooks/pkg/infra/notifdisp"
	"eventSourcedBooks/pkg/infra/repos"
)

// Injectors from wire.go:

// InitializeEvent creates an Event. It will error if the Event is staffed with
// a grumpy greeter.
func InitializeApp() (*app, error) {
	loggerFactory, err := logger.NewLoggerFactory()
	if err != nil {
		return nil, err
	}
	authRepository := repos.NewAuthRepository()
	authService := auth.NewAuthService(authRepository)
	viper := config.NewConfig(loggerFactory)
	appInsightsOptions := config.NewInsightsOptions(viper)
	appInsightsCore := insights.NewInsightsCore(appInsightsOptions, loggerFactory)
	databaseOptions := config.NewDatabaseOptions(viper)
	tracedDB := db.NewDatabaseContext(appInsightsCore, databaseOptions)
	httpClient := http.NewHttpClient(appInsightsCore)
	nagaOptions := config.NewNagaOptions(viper)
	nagaClient := naga.NewNagaClient(httpClient, loggerFactory, nagaOptions)
	usagoOptions := config.NewUsagoOptions(viper)
	channelManager := msgbrker.NewUsagoManager(loggerFactory, usagoOptions)
	notificationDispatch := notifdisp.NewNotificationDispatch(loggerFactory, channelManager, appInsightsCore)
	courtroomRepository := repos.NewCourtroomRepository(tracedDB, nagaClient, loggerFactory, notificationDispatch)
	courtroomService := courtroom.NewCourtroomService(loggerFactory, courtroomRepository)
	courtroomController := v1.NewCourtroomController(courtroomService, loggerFactory)
	infrastructure := infra.NewInfrastructure(appInsightsCore, loggerFactory)
	restApp := NewApp(loggerFactory, authService, courtroomController, appInsightsCore, infrastructure, tracedDB)
	return restApp, nil
}
