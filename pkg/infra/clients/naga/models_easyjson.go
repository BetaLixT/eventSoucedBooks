// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package naga

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	base "eventSourcedBooks/pkg/domain/base"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgInfraClientsNaga(in *jlexer.Lexer, out *JoinInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audioConferencing":
			easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgDomainBase(in, &out.AudioConferencing)
		case "chatInfo":
			easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgDomainBase1(in, &out.ChatInfo)
		case "creationDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationDateTime).UnmarshalJSON(data))
			}
		case "startDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDateTime).UnmarshalJSON(data))
			}
		case "endDateTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDateTime).UnmarshalJSON(data))
			}
		case "id":
			out.ID = string(in.String())
		case "joinWebUrl":
			out.JoinWebURL = string(in.String())
		case "subject":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgInfraClientsNaga(out *jwriter.Writer, in JoinInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"audioConferencing\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgDomainBase(out, in.AudioConferencing)
	}
	{
		const prefix string = ",\"chatInfo\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgDomainBase1(out, in.ChatInfo)
	}
	{
		const prefix string = ",\"creationDateTime\":"
		out.RawString(prefix)
		out.Raw((in.CreationDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"startDateTime\":"
		out.RawString(prefix)
		out.Raw((in.StartDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"endDateTime\":"
		out.RawString(prefix)
		out.Raw((in.EndDateTime).MarshalJSON())
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"joinWebUrl\":"
		out.RawString(prefix)
		out.String(string(in.JoinWebURL))
	}
	{
		const prefix string = ",\"subject\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JoinInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgInfraClientsNaga(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JoinInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgInfraClientsNaga(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JoinInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgInfraClientsNaga(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JoinInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgInfraClientsNaga(l, v)
}
func easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgDomainBase1(in *jlexer.Lexer, out *base.ChatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "threadId":
			out.ThreadID = string(in.String())
		case "messageId":
			out.MessageID = string(in.String())
		case "replyChainMessageId":
			out.ReplyChainMessageID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgDomainBase1(out *jwriter.Writer, in base.ChatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"threadId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ThreadID))
	}
	{
		const prefix string = ",\"messageId\":"
		out.RawString(prefix)
		out.String(string(in.MessageID))
	}
	{
		const prefix string = ",\"replyChainMessageId\":"
		out.RawString(prefix)
		out.String(string(in.ReplyChainMessageID))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeTechunicornComUdcPndlCrPkgDomainBase(in *jlexer.Lexer, out *base.AudioConferencing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tollNumber":
			out.TollNumber = string(in.String())
		case "tollFreeNumber":
			out.TollFreeNumber = string(in.String())
		case "ConferenceId":
			out.ConferenceID = string(in.String())
		case "dialinUrl":
			out.DialinURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeTechunicornComUdcPndlCrPkgDomainBase(out *jwriter.Writer, in base.AudioConferencing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tollNumber\":"
		out.RawString(prefix[1:])
		out.String(string(in.TollNumber))
	}
	{
		const prefix string = ",\"tollFreeNumber\":"
		out.RawString(prefix)
		out.String(string(in.TollFreeNumber))
	}
	{
		const prefix string = ",\"ConferenceId\":"
		out.RawString(prefix)
		out.String(string(in.ConferenceID))
	}
	{
		const prefix string = ",\"dialinUrl\":"
		out.RawString(prefix)
		out.String(string(in.DialinURL))
	}
	out.RawByte('}')
}
